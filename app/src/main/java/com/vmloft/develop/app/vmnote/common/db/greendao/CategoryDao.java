package com.vmloft.develop.app.vmnote.common.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.vmloft.develop.app.vmnote.bean.Category;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CATEGORY".
*/
public class CategoryDao extends AbstractDao<Category, String> {

    public static final String TABLENAME = "CATEGORY";

    /**
     * Properties of entity Category.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property AuthorId = new Property(1, String.class, "authorId", false, "AUTHOR_ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property CreateAt = new Property(3, String.class, "createAt", false, "CREATE_AT");
        public final static Property UpdateAt = new Property(4, String.class, "updateAt", false, "UPDATE_AT");
        public final static Property IsCreate = new Property(5, boolean.class, "isCreate", false, "IS_CREATE");
        public final static Property Sync = new Property(6, boolean.class, "sync", false, "SYNC");
    }


    public CategoryDao(DaoConfig config) {
        super(config);
    }
    
    public CategoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CATEGORY\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"AUTHOR_ID\" TEXT," + // 1: authorId
                "\"TITLE\" TEXT," + // 2: title
                "\"CREATE_AT\" TEXT," + // 3: createAt
                "\"UPDATE_AT\" TEXT," + // 4: updateAt
                "\"IS_CREATE\" INTEGER NOT NULL ," + // 5: isCreate
                "\"SYNC\" INTEGER NOT NULL );"); // 6: sync
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CATEGORY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Category entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String authorId = entity.getAuthorId();
        if (authorId != null) {
            stmt.bindString(2, authorId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String createAt = entity.getCreateAt();
        if (createAt != null) {
            stmt.bindString(4, createAt);
        }
 
        String updateAt = entity.getUpdateAt();
        if (updateAt != null) {
            stmt.bindString(5, updateAt);
        }
        stmt.bindLong(6, entity.getIsCreate() ? 1L: 0L);
        stmt.bindLong(7, entity.getSync() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Category entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String authorId = entity.getAuthorId();
        if (authorId != null) {
            stmt.bindString(2, authorId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String createAt = entity.getCreateAt();
        if (createAt != null) {
            stmt.bindString(4, createAt);
        }
 
        String updateAt = entity.getUpdateAt();
        if (updateAt != null) {
            stmt.bindString(5, updateAt);
        }
        stmt.bindLong(6, entity.getIsCreate() ? 1L: 0L);
        stmt.bindLong(7, entity.getSync() ? 1L: 0L);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Category readEntity(Cursor cursor, int offset) {
        Category entity = new Category( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // authorId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // createAt
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // updateAt
            cursor.getShort(offset + 5) != 0, // isCreate
            cursor.getShort(offset + 6) != 0 // sync
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Category entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAuthorId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreateAt(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUpdateAt(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsCreate(cursor.getShort(offset + 5) != 0);
        entity.setSync(cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(Category entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Category entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Category entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
